version: '3.8'

services:
  # CI/CD Services
  jenkins:
    image: jenkins/jenkins:2.428-jdk17
    container_name: jenkins
    restart: unless-stopped
    ports:
      - "8081:8080"
      - "50000:50000"
    environment:
      - JENKINS_OPTS=--httpPort=8080
      - JAVA_OPTS=-Xmx2g
    volumes:
      - jenkins-data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - ./jenkins/plugins.txt:/usr/share/jenkins/ref/plugins.txt
    networks:
      - cicd
    user: root  # Required for Docker socket access
    
  sonarqube:
    image: sonarqube:10.2.1-community
    container_name: sonarqube
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
      - SONAR_JDBC_URL=jdbc:postgresql://sonarqube-db:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    volumes:
      - sonarqube-data:/opt/sonarqube/data
      - sonarqube-logs:/opt/sonarqube/logs
      - sonarqube-extensions:/opt/sonarqube/extensions
    networks:
      - cicd
    depends_on:
      - sonarqube-db

  sonarqube-db:
    image: postgres:15-alpine
    container_name: sonarqube-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - sonarqube-db:/var/lib/postgresql/data
    networks:
      - cicd

  # CI/CD Tools Container (for running pipeline commands)
  cicd-tools:
    build:
      context: .
      dockerfile: ci-tools.Dockerfile
    container_name: cicd-tools
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - .:/workspace
      - maven-cache:/home/cicd/.m2
    networks:
      - cicd
      - observability
    working_dir: /workspace
    command: ["sleep", "infinity"]  # Keep container running

  # Application Services
  observability-demo:
    build: .
    container_name: observability-demo-app
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=local
      - LOKI_URL=http://loki:3100/loki/api/v1/push
      - GRAFANA_OTLP_TRACES_URL=http://tempo:4318/v1/traces
      - GRAFANA_OTLP_METRICS_URL=http://prometheus:9090/api/v1/write
    depends_on:
      - loki
      - tempo
      - prometheus
    networks:
      - observability
    volumes:
      - ./logs:/app/logs

  # Observability Stack
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - observability
    volumes:
      - loki-data:/loki

  tempo:
    image: grafana/tempo:2.2.0
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./docker/tempo.yaml:/etc/tempo.yaml
      - tempo-data:/tmp/tempo
    ports:
      - "3200:3200"   # tempo
      - "4317:4317"   # otlp grpc
      - "4318:4318"   # otlp http
    networks:
      - observability

  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - observability

  grafana:
    image: grafana/grafana-oss:10.2.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana-dashboards:/var/lib/grafana/dashboards
    networks:
      - observability

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    volumes:
      - ./docker/promtail.yml:/etc/promtail/config.yml
      - ./logs:/var/log/app:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - observability

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.87.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./docker/otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "4319:4317"   # OTLP gRPC receiver (remapped to avoid conflict)
      - "4320:4318"   # OTLP HTTP receiver (remapped to avoid conflict)
      - "8888:8888"   # Prometheus metrics exposed by the collector
    depends_on:
      - tempo
      - prometheus
      - loki
    networks:
      - observability

  # Nginx reverse proxy for easier access
  nginx:
    image: nginx:alpine
    container_name: cicd-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - jenkins
      - sonarqube
      - grafana
      - observability-demo
    networks:
      - cicd
      - observability

networks:
  cicd:
    driver: bridge
  observability:
    driver: bridge

volumes:
  jenkins-data:
  sonarqube-data:
  sonarqube-logs:
  sonarqube-extensions:
  sonarqube-db:
  maven-cache:
  loki-data:
  tempo-data:
  prometheus-data:
  grafana-data:

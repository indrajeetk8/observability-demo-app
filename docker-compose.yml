version: '3.8'

services:
  # Main Application
  observability-demo:
    build: .
    container_name: observability-demo-app
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=local
      - LOKI_URL=http://loki:3100/loki/api/v1/push
      - GRAFANA_OTLP_TRACES_URL=http://tempo:4318/v1/traces
      - GRAFANA_OTLP_METRICS_URL=http://prometheus:9090/api/v1/write
    depends_on:
      - loki
      - tempo
      - prometheus
    networks:
      - observability
    volumes:
      - ./logs:/app/logs

  # Loki for log aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - observability
    volumes:
      - loki-data:/loki

  # Tempo for tracing
  tempo:
    image: grafana/tempo:2.2.0
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./docker/tempo.yaml:/etc/tempo.yaml
      - tempo-data:/tmp/tempo
    ports:
      - "3200:3200"   # tempo
      - "4317:4317"   # otlp grpc
      - "4318:4318"   # otlp http
    networks:
      - observability

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - observability

  # Grafana for visualization
  grafana:
    image: grafana/grafana-oss:10.2.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana-dashboards:/var/lib/grafana/dashboards
    networks:
      - observability

  # Promtail for log collection (alternative to direct Loki integration)
  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    volumes:
      - ./docker/promtail.yml:/etc/promtail/config.yml
      - ./logs:/var/log/app
      - /var/log:/var/log:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - observability

  # OTEL Collector (optional - for more advanced telemetry routing)
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.87.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./docker/otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics exposed by the collector
    depends_on:
      - tempo
      - prometheus
      - loki
    networks:
      - observability

networks:
  observability:
    driver: bridge

volumes:
  loki-data:
  tempo-data:
  prometheus-data:
  grafana-data:
